import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.taglibs.standard.lang.jstl.test.beans.PublicBean1;

public class UserDao {
private String jdbcURL= "jdbc:mysql://localhost:3306/exemplo1?useSSL=false";
private String jdbcUsername= "admin";
private String jdbcPassword= "admin";

private static final String INSERT_SQL= "INSERT INTO users" + "(name,email,country) Values" + "(?,?,?)";
private static final String SELECT_ALL_USERS_SQL= "select * from users";
private static final String UPDATE_SQL= "update users set name =?, email=?, country=?, where id=?;";
private static final String DELETE_SQL="delete from users where id=?;";

protected Connection getConnection() {
	Connection connection=null;
	try {
		Class.forName("com.mysql.jdbc.Driver");
		connection = DriverManager.getConnection(jdbcURL,jdbcUsername,jdbcPassword);
	} catch (SQLException e) {
	    e.printStackTrace();
	} catch (ClassNotFoundException e) {
		// TODO: handle exception
		e.printStackTrace();
	}    
	return connection;
    }

// inserir um usuario novo
  public void insert(User user) throws SQLException {
	  try(Connection connection = getConnection();
			 PreparedStatement preparedStatement = connection.prepareStatement(INSERT_SQL);){
		    preparedStatement.setString(1, user.getName());
		    preparedStatement.setString(2, user.getEmail());
		    preparedStatement.setString(3, user.getCountry());
		    preparedStatement.executeUpdate();
	  } catch (Exception e) {
		  e.printStackTrace();
	  }
  }
  
	 // atualizar usuarios
	 public boolean updateUser(User user)  throws SQLException{
		 boolean rowUpdated;
		 try (Connection connection = getConnection();
			PreparedStatement statement = connection.prepareStatement(UPDATE_SQL);){
			statement.setString(1, user.getName());
		    statement.setString(2, user.getEmail());
			statement.setString(3, user.getCountry());
			statement.setInt(4, user.getId());
			
			rowUpdated = statement.executeUpdate() > 0;	 
				 
		 }	  
        return rowUpdated;
   }
   
	// Selecionar todos os usuarios
	 public List<User> selectAllUsers() {
			List<User> users = new ArrayList<>();
			try (Connection connection = getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_USERS_SQL);){
		        System.out.println(preparedStatement);
		        ResultSet rs = preparedStatement.executeQuery();
		      
		        while (rs.next()) {
		        	int id =rs.getInt("id");
		        	String name = rs.getString("name");
		        	String email = rs.getString("email");
		        	String country = rs.getString("country");
		        	users.add(new User(id,name,email,country));
		        }
		        
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return users;	 
 }
	 // deletar usuarios
	 public boolean deleteUser(int id)  throws SQLException{
	 boolean rowDeleted;	 
	 try (Connection connection = getConnection();
	 PreparedStatement statement = connection.prepareStatement(DELETE_SQL);){
		statement.setInt(1, id);
		rowDeleted = statement.executeUpdate() >0;
	 }
	 return rowDeleted;
}

}




